<% if @query.errors.any? %>
  <div class="alert alert-danger"><%= @query.errors.full_messages.first %></div>
<% end %>

<%= form_for @query, html: {class: "the_form", autocomplete: "off"} do |f| %>
  <div class="row">
    <div class="col-xs-8">
      <div class= "form-group">
        <%= f.hidden_field :statement %>
        <div id="editor-container">
          <div id="editor"><%= @query.statement %></div>
        </div>
      </div>
      <div class="form-group text-right">
        <div class="pull-left" style="margin-top: 6px;">
          <%= link_to "Back", :back %>
          <span class="text-muted" style="margin-left: 20px;"> Use {start_time} and {end_time} for time ranges</span>
        </div>
        <%= select_tag :table_names, options_for_select([["Preview table", nil]] + tables.keys), style: "margin-right: 20px; width: 240px;" %>
        <%= link_to "Run", "#", class: "btn btn-info", id: "run", style: "vertical-align: top;" %>
      </div>
    </div>
    <div class="col-xs-4">
      <div class="form-group">
        <%= f.label :name %>
        <%= f.text_field :name, class: "form-control" %>
      </div>
      <div class="form-group">
        <%= f.label :description %>
        <%= f.text_area :description, placeholder: "Optional", style: "height: 80px;", class: "form-control" %>
      </div>
      <div class="text-right">
        <% if can?(:delete, @query) && @query.persisted? %>
          <%= link_to "Delete", query_path(@query), method: :delete, "data-confirm" => "Are you sure?", class: "btn btn-danger" %>
        <% end %>
        <%= f.submit "Save", class: "btn btn-success" %>
      </div>
    </div>
  </div>
<% end %>

<div id="results"></div>

<script>
  var editor = ace.edit("editor");
  editor.setTheme("ace/theme/twilight");
  editor.getSession().setMode("ace/mode/sql");
  editor.setOptions({
    enableBasicAutocompletion: false,
    enableSnippets: false,
    enableLiveAutocompletion: false,
    highlightActiveLine: false,
    fontSize: 12,
    minLines: 10
  });
  editor.renderer.setShowGutter(true);
  editor.renderer.setPrintMarginColumn(false);
  editor.renderer.setPadding(10);
  editor.getSession().setUseWrapMode(true);
  editor.commands.addCommand({
    name: 'run',
    bindKey: {win: 'Ctrl-Enter',  mac: 'Command-Enter'},
    exec: function(editor) {
        $("#run").click();
    },
    readOnly: false // false if this command should not apply in readOnly mode
  });

  editor.resize();
  $("#editor").show();
  editor.focus();

  var error_line = null;

  $("#run").click(function (e) {
    e.preventDefault();

    if (error_line) {
      editor.getSession().removeGutterDecoration(error_line - 1, "error");
      error_line = null;
    }

    $("#results").html('<p class="text-muted">Loading...</p>');
    $.post("<%= run_queries_path %>", {statement: editor.getValue()}, function (data) {
      $("#results").html(data);

      error_line = /LINE (\d+)/g.exec($("#results").find('.alert-danger').text());

      if (error_line) {
        error_line = parseInt(error_line[1], 10);
        editor.getSession().addGutterDecoration(error_line - 1, "error");
        editor.scrollToLine(error_line, true, true, function () {});
        editor.gotoLine(error_line, 0, true);
        editor.focus();
      }
    });
  });

  if ($("#query_statement").val() != "") {
    $("#run").click();
  }

  $("#table_names").selectize({
  }).change( function () {
    var val = $(this).val();
    if (val.length > 0) {
      editor.setValue("SELECT * FROM " + val + " LIMIT 10");
      $("#run").click();
    }
  });

  $("form.the_form").on("submit", function() {
    $("#query_statement").val(editor.getValue());
    return true;
  });
</script>
